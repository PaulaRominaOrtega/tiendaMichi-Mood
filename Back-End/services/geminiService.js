const { GoogleGenerativeAI } = require('@google/generative-ai');

const apiKey = process.env.GEMINI_API_KEY;

const genAI = apiKey ? new GoogleGenerativeAI(apiKey) : null;

if (!apiKey) {
    console.error("Error: GEMINI_API_KEY no est√° definida. La API de Gemini estar√° inactiva.");
}
const generateResponse = async (userMessage, intent, productData = null) => {
    
    if (!genAI) {
        return '¬°Miau! Lo siento, el servicio de IA no est√° disponible en este momento. Por favor, revisa la configuraci√≥n de la API. üòø';
    }

    try {
        
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

        let prompt = '';

        switch (intent) {
            case 'productos':
                if (productData && productData.length > 0) {
                    const productInfo = productData.map(p =>
                        `- ${p.nombre}: ${p.descripcion || 'Sin descripci√≥n'}. Precio: $${p.precio}. Stock: ${p.stock} unidades. Material: ${p.material || 'No especificado'}. Capacidad: ${p.capacidad || 'No especificada'}. ${p.caracteristicas_especiales ? 'Caracter√≠sticas: ' + p.caracteristicas_especiales : ''}`
                    ).join('\n');

                    prompt = `Eres un asistente virtual amigable de una tienda de productos para amantes de los gatos llamada Michi Mood.
El usuario pregunt√≥: "${userMessage}"

Aqu√≠ est√°n los productos que encontr√© en nuestra base de datos (S√© muy conciso y directo con la informaci√≥n del producto):
${productInfo}

Responde de forma amigable, concisa y √∫til sobre estos productos. Si el usuario pregunta por stock, capacidad o material, proporciona esa informaci√≥n espec√≠fica. Mant√©n un tono alegre y tem√°tico de gatos (puedes usar "miau" ocasionalmente pero sin exagerar).`;
                } else {
                    prompt = `Eres un asistente virtual amigable de una tienda de productos para amantes de los gatos llamada Michi Mood.
El usuario pregunt√≥: "${userMessage}"

No encontr√© productos espec√≠ficos que coincidan con esa b√∫squeda en nuestra base de datos. Responde de forma amigable sugiriendo que el usuario puede explorar nuestras categor√≠as o hacer una b√∫squeda m√°s espec√≠fica. Mant√©n un tono alegre y tem√°tico de gatos.`;
                }
                break;

            case 'envios':
                prompt = `Eres un asistente virtual amigable de una tienda de productos para gatos llamada Michi Mood.
El usuario pregunt√≥ sobre env√≠os: "${userMessage}"

Explica que realizamos env√≠os a todo el pa√≠s, los tiempos de entrega son de 3-7 d√≠as h√°biles, y ofrecemos env√≠o gratis en compras superiores a $5000. S√© amigable y conciso.`;
                break;

            case 'medios_de_pago':
                prompt = `Eres un asistente virtual amigable de una tienda de productos para gatos llamada Michi Mood.
El usuario pregunt√≥ sobre medios de pago: "${userMessage}"

Explica que aceptamos tarjetas de cr√©dito/d√©bito, transferencias bancarias y Mercado Pago. S√© amigable y conciso.`;
                break;

            case 'personalizacion_producto':
                prompt = `Eres un asistente virtual amigable de una tienda de productos para gatos llamada Michi Mood.
El usuario quiere personalizar un producto: "${userMessage}"

Explica que ofrecemos personalizaci√≥n de productos y que est√°s procesando su solicitud. S√© entusiasta y amigable.`;
                break;

            case 'saludo':
                prompt = `Eres un asistente virtual amigable de una tienda de productos para gatos llamada Michi Mood.
El usuario te salud√≥: "${userMessage}"

Responde con un saludo c√°lido y pregunta en qu√© puedes ayudar. Menciona brevemente que puedes ayudar con productos, env√≠os, medios de pago o personalizaci√≥n.`;
                break;

            case 'otros':
            default:
                prompt = `Eres un asistente virtual amigable de una tienda de productos para gatos llamada Michi Mood.
El usuario pregunt√≥: "${userMessage}"

Responde de forma √∫til y amigable. **IMPORTANTE:** Si no est√°s seguro de la respuesta, **sugiere que contacten al equipo de soporte o exploren la tienda** (como hiciste antes). No inventes informaci√≥n.`;
                break;
        }

        const result = await model.generateContent(prompt);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error('Error en el servicio de Gemini:', error);
        
        return '¬°Uy! Parece que mi cerebro de gatito est√° tomando una siesta. Intenta de nuevo m√°s tarde, ¬°miau! üò∫';
    }
};

module.exports = {
    generateResponse,
};